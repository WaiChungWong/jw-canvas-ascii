{"version":3,"sources":["module/index.js","index.js"],"names":["min","Math","floor","SAMPLE_ASCII","Array","fill","join","CanvasASCII","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textWidth","textHeight","update","bind","assertThisInitialized","state","asciiCode","prevProps","context","pixels","canvas","width","height","getContext","getImageData","data","_context","RGBA","UNSIGNED_BYTE","Uint8Array","readPixels","bytesPerRow","temp","i","topOffset","bottomOffset","set","subarray","copyWithin","asciiElement","calibrator","invert","asciiData","asciiIntervals","length","offsetWidth","offsetHeight","canvasWidthScale","canvasHeightScale","widthScale","heightScale","_getPixels","y","x","round","averageValue","setState","generateAsciiCode","_this2","_this$props","rest","objectWithoutProperties","react_default","a","createElement","ref","c","style","position","margin","visibility","Component","defaultProps","Demo","fontSize","showDrawing","_resizeHandler","animate","scene","Scene","camera","PerspectiveCamera","z","add","light","PointLight","geometry","BoxGeometry","material","MeshLambertMaterial","color","cube","Mesh","timeDiff","rotation","ascii2","canvas1","ascii1","canvas2","centerX","centerY","fillStyle","fillRect","beginPath","arc","PI","lineWidth","strokeStyle","stroke","eyeY","setCanvas","renderer","setClearColor","getCanvasElement","animator","start","window","addEventListener","setTimeout","removeEventListener","id","className","src_module","concat","lib_default","htmlFor","type","checked","onChange","e","target","value","render","src_Demo","document","getElementById"],"mappings":"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","file":"static/js/main.0d06ffe0.chunk.js","sourcesContent":["/*eslint no-unused-vars: [\"warn\", { \"ignoreRestSiblings\": true }]*/\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst { min, floor } = Math;\n\nconst SAMPLE_SIZE = 10;\nconst SAMPLE_ASCII = Array(SAMPLE_SIZE)\n  .fill(\n    Array(SAMPLE_SIZE)\n      .fill(\".\")\n      .join(\"\")\n  )\n  .join(\"\\n\");\n\nclass CanvasASCII extends Component {\n  constructor(props) {\n    super(props);\n\n    this.textWidth = null;\n    this.textHeight = null;\n\n    this.update = this.update.bind(this);\n\n    this.state = {\n      asciiCode: \"\"\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.update();\n    }\n  }\n\n  _getPixels() {\n    const { canvas } = this;\n    const { width, height } = canvas;\n    let context, pixels;\n\n    if ((context = canvas.getContext(\"2d\")) !== null) {\n      pixels = context.getImageData(0, 0, width, height).data;\n    } else if ((context = canvas.getContext(\"webgl\")) !== null) {\n      const { RGBA, UNSIGNED_BYTE } = context;\n\n      pixels = new Uint8Array(4 * width * height);\n      context.readPixels(0, 0, width, height, RGBA, UNSIGNED_BYTE, pixels);\n\n      let bytesPerRow = width * 4;\n      let temp = new Uint8Array(bytesPerRow);\n\n      for (let i = 0; i < Math.floor(height / 2); i++) {\n        let topOffset = i * bytesPerRow;\n        let bottomOffset = (height - i - 1) * bytesPerRow;\n\n        temp.set(pixels.subarray(topOffset, topOffset + bytesPerRow));\n        pixels.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n        pixels.set(temp, bottomOffset);\n      }\n    }\n\n    return pixels;\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n    this.update();\n  }\n\n  /** Get the pre element with the generated ascii text. */\n  getTextElement() {\n    return this.asciiElement;\n  }\n\n  /** Generate ascii text from the canvas image data. */\n  generateAsciiCode() {\n    const { canvas, calibrator, props } = this;\n    const { invert, asciiData } = props;\n    const asciiIntervals = 255 / asciiData.length;\n\n    this.textWidth = calibrator.offsetWidth / SAMPLE_SIZE;\n    this.textHeight = calibrator.offsetHeight / SAMPLE_SIZE;\n\n    let asciiCode = \"\";\n\n    if (canvas) {\n      const { width, height, offsetWidth, offsetHeight } = canvas;\n\n      if (width && height && offsetWidth && offsetHeight) {\n        const canvasWidthScale = offsetWidth / width;\n        const canvasHeightScale = offsetHeight / height;\n\n        const widthScale = this.textWidth / canvasWidthScale;\n        const heightScale = this.textHeight / canvasHeightScale;\n\n        const pixels = this._getPixels();\n\n        for (let y = 0; y < height; y += heightScale) {\n          for (let x = 0; x < width; x += widthScale) {\n            let i = Math.round(y) * width * 4 + Math.round(x) * 4;\n\n            if (i >= pixels.length) {\n              break;\n            }\n\n            /* turn RGB color to grayscale. */\n            let averageValue = pixels[i] + pixels[i + 1] + pixels[i + 2];\n\n            averageValue = ((averageValue / 3) * pixels[i + 3]) / 255;\n\n            /* set revert. */\n            if (invert === false) {\n              averageValue = 255 - averageValue;\n            }\n\n            /* work out the index of the asciiData. */\n            const index = min(\n              floor(averageValue / asciiIntervals),\n              asciiData.length - 1\n            );\n\n            asciiCode += asciiData[index];\n          }\n\n          asciiCode += \"\\n\";\n        }\n      }\n    }\n\n    return asciiCode;\n  }\n\n  /** Update the pre element with generated ascii text. */\n  update() {\n    this.setState({ asciiCode: this.generateAsciiCode() });\n  }\n\n  render() {\n    const { invert, asciiData, ...rest } = this.props;\n    const { asciiCode } = this.state;\n\n    return (\n      <div {...rest}>\n        <pre\n          ref={c => (this.calibrator = c)}\n          style={{\n            position: \"absolute\",\n            margin: \"0px\",\n            visibility: \"hidden\"\n          }}\n        >\n          {SAMPLE_ASCII}\n        </pre>\n        <pre\n          ref={a => (this.asciiElement = a)}\n          style={{\n            position: \"absolute\",\n            margin: \"0px\"\n          }}\n        >\n          {asciiCode}\n        </pre>\n      </div>\n    );\n  }\n}\n\nCanvasASCII.propTypes = {\n  invert: PropTypes.bool,\n  asciiData: PropTypes.arrayOf(PropTypes.string)\n};\n\nCanvasASCII.defaultProps = {\n  invert: false,\n  asciiData: [\" \", \".\", \",\", \";\", \"|\", \"*\", \"%\", \"@\", \"X\", \"#\", \"W\", \"M\"]\n};\n\nexport default CanvasASCII;\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport {\n  Scene,\n  PerspectiveCamera,\n  PointLight,\n  BoxGeometry,\n  MeshLambertMaterial,\n  Mesh\n} from \"three\";\n\nimport ThreeCanvas from \"jw-three-canvas\";\n\nimport CanvasASCII from \"./module\";\n\nimport \"./style.css\";\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fontSize: 7,\n      invert: false,\n      showDrawing: true\n    };\n\n    this._resizeHandler = this._resizeHandler.bind(this);\n    this.animate = this.animate.bind(this);\n\n    this.scene = new Scene();\n\n    this.camera = new PerspectiveCamera(50, 1, 1, 1000);\n    this.camera.position.z = 60;\n    this.scene.add(this.camera);\n\n    let light = new PointLight(0xffff00);\n    light.position.set(10, 0, 25);\n    this.scene.add(light);\n\n    let geometry = new BoxGeometry(20, 20, 20);\n    let material = new MeshLambertMaterial({ color: 0x55ff55 });\n    this.cube = new Mesh(geometry, material);\n    this.scene.add(this.cube);\n  }\n\n  animate(width, height, timeDiff) {\n    const { cube } = this;\n\n    cube.rotation.x += timeDiff;\n    cube.rotation.y += timeDiff;\n\n    this.ascii2.update();\n  }\n\n  componentDidMount() {\n    const { canvas1, ascii1, canvas2, ascii2 } = this;\n\n    let context = canvas1.getContext(\"2d\");\n    let centerX = canvas1.width / 2;\n    let centerY = canvas1.height / 2;\n    let radius = 70;\n    let eyeRadius = 10;\n    let eyeXOffset = 25;\n    let eyeYOffset = 20;\n\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas1.width, canvas1.height);\n\n    // draw the yellow circle\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fillStyle = \"yellow\";\n    context.fill();\n    context.lineWidth = 5;\n    context.strokeStyle = \"black\";\n    context.stroke();\n\n    // draw the eyes\n    context.beginPath();\n    let eyeY = centerY - eyeYOffset;\n    context.arc(centerX - eyeXOffset, eyeY, eyeRadius, 0, 2 * Math.PI, false);\n    context.arc(centerX + eyeXOffset, eyeY, eyeRadius, 0, 2 * Math.PI, false);\n    context.fillStyle = \"black\";\n    context.fill();\n\n    // draw the mouth\n    context.beginPath();\n    context.arc(centerX, centerY, 50, 0, Math.PI, false);\n    context.stroke();\n\n    ascii1.setCanvas(canvas1);\n\n    canvas2.renderer.setClearColor(0xffffff);\n    ascii2.setCanvas(canvas2.getCanvasElement());\n\n    canvas2.animator.start();\n\n    window.addEventListener(\"resize\", this._resizeHandler, false);\n\n    setTimeout(() => {\n      ascii1.update();\n      ascii2.update();\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this._resizeHandler);\n  }\n\n  _resizeHandler() {\n    this.ascii1.update();\n    this.ascii2.update();\n  }\n\n  render() {\n    const { scene, camera, state } = this;\n    const { fontSize, invert, showDrawing } = state;\n\n    return (\n      <div id=\"demo\">\n        <div className=\"ascii\">\n          <canvas\n            ref={c => (this.canvas1 = c)}\n            className={showDrawing ? \"show\" : \"\"}\n          />\n          <CanvasASCII\n            ref={a => (this.ascii1 = a)}\n            style={{ fontSize: `${fontSize}px` }}\n            invert={invert}\n          />\n        </div>\n        <div className=\"ascii\">\n          <ThreeCanvas\n            className={showDrawing ? \"show\" : \"\"}\n            ref={c => (this.canvas2 = c)}\n            animate={this.animate}\n            scene={scene}\n            camera={camera}\n          />\n          <CanvasASCII\n            ref={a => (this.ascii2 = a)}\n            style={{ fontSize: `${fontSize}px` }}\n            invert={invert}\n          />\n        </div>\n        <div id=\"settings\">\n          <div className=\"title\">Settings</div>\n          <div className=\"field\">\n            <label htmlFor=\"invert\">invert value: </label>\n            <input\n              id=\"invert\"\n              type=\"checkbox\"\n              checked={invert}\n              onChange={e => this.setState({ invert: e.target.checked })}\n            />\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"fontSize\">font size: </label>\n            <input\n              id=\"fontSize\"\n              type=\"number\"\n              value={fontSize}\n              onChange={e => this.setState({ fontSize: e.target.value })}\n            />\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"showDrawing\">show drawing: </label>\n            <input\n              id=\"showDrawing\"\n              type=\"checkbox\"\n              checked={showDrawing}\n              onChange={e => this.setState({ showDrawing: e.target.checked })}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nrender(<Demo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}